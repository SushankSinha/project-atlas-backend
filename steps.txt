
-------------Video no 3----------------

1. Create a empty folder as a project to store all the files
    Create 

2. npm init -y //package.json --- change the name in the files

3. npm i express

4. create an app.js file

5. install nodemon 

6.  const express = require('express');
    const app = express();
    const PORT = 1234

    app.get('/', (req, res)=> {
    res.send("hey there!")
});

app.listen(PORT, () => {
    console.log("server is running at PORT no. ", PORT);
});

7. Create all the endpoints in the same way.

-------------Video no 4----------------

8. Create middleware

    const middleware = (res, req, next) => {
        console.log("xyz")

        next();   //call next fn when user authentication is done
    }

    insert middleware wherever required
     
    ex -    app.get('/about', middleware (req, res)=> {
    res.send("I'm About!")
});


-------------Video no 5----------------

9. Go to MOngoDB Atlas

    create new project
    create a cluster
    create a database
    go to network ---> create an ID and password + Add IP Address to be accesible from anywhere
    access and copy the link containing ID & password
    (mongo -v) // to check the version in cmd


10. npm i mongoose

11. // scroll to top //

    const dataBase = {MOngoDB URL}
    mongoose.connect(dataBase).then(()=> {
        console.log("MOngoDB server connected")
    }).catch((err) console.log("Error", err))


-------------Video no 6----------------

12. npm i dotenv

13. run type null > config.env 

    //scroll to top//

    const dotenv = require('dotenv');

    Create a DATABASE file in config.env

    DATABASE = {MOngoDB URL}
    PORT = 1234

    // Go to app.js //

    dotenv.config({path : './config.env'}); //need to declare only once
    //after this, delete PORT declaration from line no 6 //

14. Create a DB folder inside backend folder

    Create connect.js file

    // cut the following code from app.js and insert here// 

    const mongoose = require('mongoose');

    const dataBase = process.env.DATABASE;

    mongoose.connect(dataBase).then(() => {
    console.log("mongoose connection started")
    }).catch((err)=> console.log("Mongoose connection refused", err))

    // Go to app .js //

    require('./db/connect'); 

-------------Video no 7----------------

15. a. Create another folder as models in backend  and create a file name as Schema.js

    b. const mongoose = require('mongoose');

    const userSchema = new mongoose.Schema({
    name : {
        type : String,
        required : true
    }
    })

    const User = mongoose.model('USER', userSchema);

    module.exports = User;

-------------Video no 8----------------

16. Create another folder as router in backend and create a file name as authentication.js

    // in app.js //

    app.use(require('./router/authentication'));

    // in authentication.js //

    const express = require('express');

    const router = express.Router();

    router.get('/', (req, res)=> {
    res.send('I am authentication')
    })

    ------use postman-----

    router.post('/register', (req, res) => {
    console.log(req.body);
    res.json({message : req.body})
    // res.send("details daal bhai")
    })

    module.exports = router;

    // in app.js //

    app.use(express.json());

-------------Video no 9----------------


const filterMovieData=(searchText,movieList)=>{
 
  return (movieList.filter((element)=>element.name.toUpperCase().includes(searchText.toUpperCase())))
}

function NavbarMUI({setMovieList,movieList,filterMovieList,setfilterMovieList,mode,setMode}) {
  const[searchText,setSearchText]=useState("")
  console.log(filterMovieList)
  console.log("mode is",mode)
  const handleSearchChange=(e)=>{
    const value=e.target.value
    setSearchText(value)
    console.log(searchText)
    //handleSearchBlur()
  }

  const handleSearchBlur=()=>{
    console.log(1)
    //filter out the data from the array
    const data=filterMovieData(searchText,movieList)
    console.log(data)
    //update the data=> movielist
    // setMovieList(data)=>1 search
    setfilterMovieList(data)
    }
const navigate=useNavigate()
  return (
    <Box sx={{ display: 'flex',marginBottom:"5%" }}>
      <CssBaseline />
      <AppBar component="nav">
        <Toolbar>
          <Typography
            variant="h6"
            component="div"
            sx={{ flexGrow: 1, display: { xs: 'none', sm: 'block' } }}
          >
            WebApp-Movies-B47 
          </Typography>
          <Box sx={{ display: { xs: 'none', sm: 'block' } }}>
              <Button sx={{ color: '#fff' }}
              onClick={()=>{
                navigate('/')
              }}
              >Home</Button>

<Button sx={{ color: '#fff' }}
              onClick={()=>{
                navigate('/addmovie')
              }}
              >AddMovie</Button>
         

          <Button sx={{ color: '#fff' }}
              onClick={()=>{
                navigate('/colorgame')
              }}
              >Colorgame</Button>
         

          <Button sx={{ color: '#fff' }}
              onClick={()=>{
                navigate('/propdrilling')
              }}
              >PropDrilling</Button>
         

          <Button sx={{ color: '#fff' }}
              onClick={()=>{
                navigate('/themecontext')
              }}
              >useContext</Button>

              <Button sx={{ color: '#fff' }}
              onClick={()=>{setMode(mode==="light"?"dark":"light")}}
              >{mode==="light"?"dark Mode":"light Mode"}</Button>

<Button sx={{ color: '#fff' }}
              onClick={()=>{
                navigate('/tictactoe')
              }}
              >TicTacToe</Button>
          </Box>
          
        {/* serach functionality added */}
          <Search>
            <SearchIconWrapper>
              <SearchIcon />
            </SearchIconWrapper>
            <StyledInputBase
            value={searchText}
              placeholder="Searchâ€¦"
              inputProps={{ 'aria-label': 'search' }}
              onChange={handleSearchChange}     
              onBlur={handleSearchBlur}         

            />
          </Search>